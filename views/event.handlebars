<div class="row">
  <div class="col-auto">
    <h2>{{username}}</h2>
    <form action="/api/users/logout" method="post">
      <button type="submit" class="btn btn-primary button">Logout</button>
    </form>
  </div>
</div>

{{#if events.length}}
  <div class="col-md-6 event-list">
    <h3>Upcoming Events:</h3>
    {{#each events as |event|}}
      <div class="row mb-2">
        <div class="col-md-8">
          <h4><a href="/event/{{event.id}}">{{event.event_name}}</a></h4>
          <p>Event Date: {{event.date}}</p>
          <p>Location: {{event.location}}</p>
          <p>Dress Code: {{event.dresscode}}</p>
          {{#if event.theme}}
            <p>Theme: {{event.theme}}</p>
          {{/if}}
          <p>Budget: ${{event.budget}}</p>
          <p>Food: ${{event.food}}</p>
          <p>Rentals: ${{event.rentals}}</p>
          <p>Supplies: ${{event.supplies}}</p>
          <p>Entertainment: ${{event.entertainment}}</p>
        </div>
        <div class="col-md-4">
          <button class="btn btn-sm btn-danger delete-btn" data-id="{{event.id}}">DELETE</button>
        </div>
      </div>
    {{/each}}
  </div>
{{/if}}

<div class="row mt-4">
  <div>
    <h3>Budget Distribution</h3>
    <div>
      <canvas id="myChart" style="background: transparent; padding-bottom: 500px"></canvas>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
{{!-- <script>
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('DOM fully loaded and parsed');
    try {
      const response = await fetch('/api/events');
      if (!response.ok) {
        const text = await response.text();
        throw new Error(`Fetch error: ${response.status} ${response.statusText}\n${text}`);
      }
      const events = await response.json();
      console.log('Fetched events:', events);
      const budgetData = {
        labels: ['Food', 'Rentals', 'Supplies', 'Entertainment'],
        datasets: [{
          label: 'Event Budget',
          data: events.map(event => [
            event.foodBudget,
            event.rentalsBudget,
            event.suppliesBudget,
            event.entertainmentBudget
          ]),
          backgroundColor: [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)'
          ],
          borderColor: [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)'
          ],
          borderWidth: 1
        }]
      };
      const ctx = document.getElementById('myChart').getContext('2d');
      new Chart(ctx, {
        type: 'doughnut',
        data: budgetData,
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'top',
            },
            title: {
              display: true,
              text: 'Event Budget Distribution'
            }
          }
        }
      });
      console.log('Chart initialized');
    } catch (error) {
      console.error('Error fetching events:', error);
    }
  });
</script> --}}
<script src="./js/npm-chart/chartconfig.js"></script>
<script src="./js/npm-chart/set-up.js"></script>

<script src="./js/deleteEvent.js"></script>
{{!-- <script src="./js/event.js"></script> --}}
